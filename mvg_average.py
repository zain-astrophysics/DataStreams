# -*- coding: utf-8 -*-
"""MVG_Average.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12dxDGeN0luczYCfPCGbojCPTFrM3mIzh
"""

import sys, time
# from google.colab import drive
import pyspark
from pyspark.conf import SparkConf
from pyspark.context import SparkContext
from pyspark.sql import SparkSession
from pyspark.sql.functions import split, col, avg, when, window
from pyspark.sql.window import Window
from pyspark.sql.types import TimestampType


def setLogLevel(sc, level):
    from pyspark.sql import SparkSession
    spark = SparkSession(sc)
    spark.sparkContext.setLogLevel(level)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: stream_twelvedata.py <hostname> <port>", file=sys.stderr)
        sys.exit(-1)

    print('Argv', sys.argv)
    host = sys.argv[1]
    port = int(sys.argv[2])
    print('host', type(host), host, 'port', type(port), port)

    sc_bak = SparkContext.getOrCreate()
    sc_bak.stop()
    time.sleep(15)
    print('Ready to work!')

    ctx = pyspark.SparkContext(appName="stock_data", master="local[*]")
    print('Context', ctx)

    spark = SparkSession(ctx).builder.getOrCreate()
    sc = spark.sparkContext

    setLogLevel(sc, "WARN")
    print('Session:', spark)
    print('SparkContext', sc)

    # Create DataFrame representing the stream of input lines from connection to host:port
    data = spark \
        .readStream \
        .format('socket') \
        .option('host', host) \
        .option('port', port) \
        .load()

    # Parse the data into columns
    stock = data.select(
        split(data.value, ' ').getItem(0).alias('DateTime'),
        split(data.value, ' ').getItem(1).alias('Symbol'),
        split(data.value, ' ').getItem(2).cast('float').alias('Price')
    )



    # Convert Datetime column to a proper timestamp type (if it's not already)
    stock = stock.withColumn("Datetime", col("DateTime").cast(TimestampType() ))


    # Filter for AAPL stock data
    aaplPrice = stock.filter(col("Symbol") == "AAPL")


    # Define time-based windows for moving averages (e.g., 10-minute and 40-minute windows for testing)
    # You can adjust these to days, but let's use minutes for this example given the frequency of your data
    windowSpec10 = window(col("Datetime"), "10 days")  # 10-minute time window (adjust as needed)
    windowSpec40 = window(col("Datetime"), "40 days")  # 40-minute time window (adjust as needed)


    # # Define window specification for moving averages
    # windowSpec10 = Window.orderBy("Date").rowsBetween(-9, 0)  # 10-day window
    # windowSpec40 = Window.orderBy("Date").rowsBetween(-39, 0)  # 40-day window

     # Calculate the 10-minute and 40-minute moving averages for AAPL
    aaplWithMAs10 = aaplPrice.groupBy(windowSpec10).agg(avg("Price").alias("10DayMA"))
    # aaplWithMAs40 = aaplPrice.groupBy(windowSpec40).agg(avg("Price").alias("40DayMA"))

    # Join the 10-minute and 40-minute moving averages on the timestamp
    # aaplWithMAs = aaplWithMAs10.join(aaplWithMAs40, "window", "outer")

        # Calculate Buy/Sell signals based on moving averages comparison
    # aaplSignals = aaplWithMAs.withColumn("Signal",
                                        # when(col("10DayMA") > col("40DayMA"), 1)
                                        # .when(col("10DayMA") < col("40DayMA"), -1)
                                        # .otherwise(0))




    # Calculate the 10-day and 40-day moving averages for AAPL
    # aaplWithMAs = aaplPrice.withColumn("10DayMA", avg("Price").over(windowSpec10)) \
    #                        .withColumn("40DayMA", avg("Price").over(windowSpec40))

    # # Calculate Buy/Sell signals based on moving averages comparison
    # aaplSignals = aaplWithMAs.withColumn("Signal",
    #                                     when(col("10DayMA") > col("40DayMA"), 1)
    #                                     .when(col("10DayMA") < col("40DayMA"), -1)
    #                                     .otherwise(0))

    # Create two separate streams for 10-day and 40-day moving averages
    # aapl10Day = aaplSignals.select("start", "Symbol", "10DayMA", "Signal")
    # aapl40Day = aaplSignals.select("start", "Symbol", "40DayMA", "Signal")

    # Write the streams to console
    # msftquery = stock.filter(col("Symbol") == "MSFT") \
        # .writeStream \
        # .outputMode('append') \
        # .format('console') \
        # .start()

    aapl10Dayquery = aaplWithMAs10 \
        .writeStream \
        .outputMode('append') \
        .format('console') \
        .start()

    # aapl40Dayquery = aapl40Day \
        # .writeStream \
        # .outputMode('append') \
        # .format('console') \
        # .start()

    # Await termination to keep the streaming jobs running
    aapl10Dayquery.awaitTermination()
    # aapl40Dayquery.awaitTermination()
    # msftquery.awaitTermination()

